{"version":3,"sources":["serviceWorker.ts","engine/redux/todo/actions/Action.ts","engine/redux/todo/reducers/reducers.ts","engine/redux/todo/store/store.ts","App.tsx","engine/redux/todo/actions/ActionCreators.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ActionType","EMPTY_STATE","Object","freeze","items","itemById","itemIdSeq","store","configureStore","reducer","arguments","length","undefined","action","type","ADD_ITEM","produce","draft","id","toString","push","item","EDIT_ITEM","TOGGLE_ITEM","completed","CLEAR_ITEMS","mapDispatchToProps","addItem","message","clearItems","editItem","itemId","toggleItem","TodoItemComponent","_ref2","optionalStyleStrikeThroughForCompleted","textDecoration","react_default","a","createElement","style","display","alignItems","Checkbox","checked","value","color","inputProps","aria-label","onClick","TextField","label","concat","placeholder","margin","variant","key","onChange","event","target","flex","disabled","connect","_ref","props","className","marginBottom","Typography","gutterBottom","Fab","Add_default","Delete_default","flexDirection","marginLeft","marginRight","map","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4b87a409.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {Item, ItemId} from \"../models/common\";\r\n\r\nexport enum ActionType {\r\n    ADD_ITEM, EDIT_ITEM, TOGGLE_ITEM, CLEAR_ITEMS\r\n}\r\n\r\nexport interface AddItemAction {\r\n    type: ActionType.ADD_ITEM,\r\n    item: Item\r\n}\r\n\r\nexport interface EditItemAction {\r\n    type: ActionType.EDIT_ITEM,\r\n    id: ItemId,\r\n    item: Item\r\n}\r\n\r\nexport interface ToggleItemAction {\r\n    type: ActionType.TOGGLE_ITEM,\r\n    id: ItemId,\r\n}\r\n\r\nexport interface ClearItemsAction {\r\n    type: ActionType.CLEAR_ITEMS\r\n}\r\n\r\nexport type Action =\r\n    | AddItemAction\r\n    | EditItemAction\r\n    | ToggleItemAction\r\n    | ClearItemsAction\r\n    ;\r\n","import produce from \"immer\";\r\n\r\nimport {State} from \"../models/common\";\r\nimport {Action, ActionType} from \"../actions/Action\";\r\n\r\nconst EMPTY_STATE: State = Object.freeze({items: [], itemById: {}, itemIdSeq: 0});\r\n\r\nexport const reducer = function (state: State = EMPTY_STATE, action: Action): State {\r\n    switch (action.type) {\r\n        case ActionType.ADD_ITEM: {\r\n            return produce(state, draft => {\r\n                const id = draft.itemIdSeq.toString();\r\n                draft.items.push(id);\r\n                draft.itemIdSeq = draft.itemIdSeq + 1;\r\n                draft.itemById[id] = action.item;\r\n            });\r\n        }\r\n        case ActionType.EDIT_ITEM: {\r\n            return produce(state, draft => {\r\n                draft.itemById[action.id] = action.item;\r\n            });\r\n        }\r\n        case ActionType.TOGGLE_ITEM: {\r\n            return produce(state, draft => {\r\n                const id = action.id;\r\n                draft.itemById[id].completed = !state.itemById[id].completed;\r\n            });\r\n        }\r\n        case ActionType.CLEAR_ITEMS: {\r\n            return EMPTY_STATE;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n","import {configureStore} from 'redux-starter-kit'\r\nimport {reducer} from '../reducers/reducers'\r\n\r\nconst store = configureStore({\r\n    reducer,\r\n});\r\n\r\nexport default store;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Checkbox, TextField, Typography} from \"@material-ui/core\";\r\n\r\nimport {Item, ItemId, State} from \"./engine/redux/todo/models/common\";\r\nimport {addItem, clearItems, editItem, toggleItem} from \"./engine/redux/todo/actions/ActionCreators\";\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = ({items, itemById,}: State /*, ownProps*/) => ({items, itemById});\r\n\r\nconst mapDispatchToProps = {addItem, clearItems, editItem, toggleItem};\r\n\r\ninterface AppProps {\r\n    items: State[\"items\"],\r\n    itemById: State[\"itemById\"],\r\n}\r\n\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nconst App: React.FC<AppProps & DispatchProps> = props => {\r\n    return (\r\n        <div className=\"App\" style={{margin: \"2.5%\", marginBottom: \"5%\",}}>\r\n            <div>\r\n                <Typography variant=\"h3\" gutterBottom>\r\n                    Simple react-redux todo list\r\n                </Typography>\r\n            </div>\r\n            <div>\r\n                <Fab color=\"primary\" aria-label=\"Add\" onClick={() => props.addItem(\"\")} style={{margin: \"1%\"}}>\r\n                    <AddIcon/>\r\n                </Fab>\r\n                <Fab aria-label=\"Delete\" onClick={props.clearItems} style={{margin: \"1%\"}}>\r\n                    <DeleteIcon/>\r\n                </Fab>\r\n            </div>\r\n            <div style={{display: \"flex\", flexDirection: \"column\", marginLeft: \"20%\", marginRight: \"20%\",}}>\r\n                {props.items.map(id => (\r\n                        <TodoItemComponent\r\n                            id={id}\r\n                            item={props.itemById[id]}\r\n                            editItem={props.editItem}\r\n                            toggleItem={props.toggleItem}\r\n                        />\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface TodoItemComponentProps {\r\n    id: ItemId,\r\n    item: Item,\r\n    editItem: DispatchProps[\"editItem\"],\r\n    toggleItem: DispatchProps[\"toggleItem\"],\r\n}\r\n\r\nfunction TodoItemComponent({id, editItem, toggleItem, item}: TodoItemComponentProps) {\r\n    const optionalStyleStrikeThroughForCompleted = item.completed ? {textDecoration: \"line-through\",} : {};\r\n\r\n    return (\r\n        <div style={{display: \"flex\", alignItems: \"center\",}}>\r\n            <Checkbox\r\n                checked={item.completed}\r\n                value=\"\"\r\n                color=\"primary\"\r\n                inputProps={{'aria-label': 'isCompleted',}}\r\n                onClick={() => toggleItem(id)}\r\n            />\r\n            <TextField\r\n                id=\"outlined-with-placeholder\"\r\n                label={`Todo-${id}`}\r\n                placeholder=\"Content\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                key={id}\r\n                onChange={event => editItem(id, event.target.value)}\r\n                value={item.message}\r\n                style={{flex: 1,}}\r\n                inputProps={{style: optionalStyleStrikeThroughForCompleted}}\r\n                disabled={item.completed}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {App};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);\r\n","import {ActionType, AddItemAction, ClearItemsAction, EditItemAction, ToggleItemAction} from \"./Action\";\r\nimport {ItemId} from \"../models/common\";\r\n\r\nexport function addItem(message: string): AddItemAction {\r\n    return {\r\n        type: ActionType.ADD_ITEM,\r\n        item: {message}\r\n    }\r\n}\r\n\r\nexport function editItem(itemId: ItemId, message: string): EditItemAction {\r\n    return {\r\n        type: ActionType.EDIT_ITEM,\r\n        id: itemId,\r\n        item: {message}\r\n    }\r\n}\r\n\r\nexport function toggleItem(itemId: ItemId): ToggleItemAction {\r\n    return {\r\n        type: ActionType.TOGGLE_ITEM,\r\n        id: itemId,\r\n    }\r\n}\r\n\r\nexport function clearItems(): ClearItemsAction {\r\n    return {\r\n        type: ActionType.CLEAR_ITEMS\r\n    };\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from \"./engine/redux/todo/store/store\";\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}