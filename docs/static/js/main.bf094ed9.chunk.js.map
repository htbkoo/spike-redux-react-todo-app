{"version":3,"sources":["serviceWorker.ts","engine/redux/todo/actions/Action.ts","engine/redux/todo/reducers/reducers.ts","engine/redux/todo/store/store.ts","App.tsx","engine/redux/todo/actions/ActionCreators.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionType","EMPTY_STATE","Object","freeze","items","itemById","itemIdSeq","store","configureStore","reducer","state","arguments","length","undefined","action","type","ADD_ITEM","produce","draft","id","toString","push","item","EDIT_ITEM","CLEAR_ITEMS","mapDispatchToProps","addItem","message","clearItems","editItem","itemId","connect","_ref","props","react_default","a","createElement","className","style","margin","Typography","variant","gutterBottom","Fab","color","aria-label","onClick","Add_default","Delete_default","display","flexDirection","marginLeft","marginRight","map","TextField","label","concat","placeholder","key","onChange","event","target","value","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DChBMC,oICGZ,IAAMC,EAAqBC,OAAOC,OAAO,CAACC,MAAO,GAAIC,SAAU,GAAIC,UAAW,ICE/DC,EAJDC,YAAe,CACzBC,QDGmB,WAA6D,IAAnDC,EAAmDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApCV,EAAaa,EAAuBH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChF,OAAQC,EAAOC,MACX,KAAKf,EAAWgB,SACZ,OAAOC,YAAQP,EAAO,SAAAQ,GAClB,IAAMC,EAAKD,EAAMZ,UAAUc,WAC3BF,EAAMd,MAAMiB,KAAKF,GACjBD,EAAMZ,UAAYY,EAAMZ,UAAY,EACpCY,EAAMb,SAASc,GAAML,EAAOQ,OAGpC,KAAKtB,EAAWuB,UACZ,OAAON,YAAQP,EAAO,SAAAQ,GAClBA,EAAMb,SAASS,EAAOK,IAAML,EAAOQ,OAG3C,KAAKtB,EAAWwB,YACZ,OAAOvB,EAEX,QACI,OAAOS,6EENbe,EAAqB,CAACC,QCjBrB,SAAiBC,GACpB,MAAO,CACHZ,KAAMf,EAAWgB,SACjBM,KAAM,CAACK,aDcsBC,WCF9B,WACH,MAAO,CACHb,KAAMf,EAAWwB,cDAwBK,SCV1C,SAAkBC,EAAgBH,GACrC,MAAO,CACHZ,KAAMf,EAAWuB,UACjBJ,GAAIW,EACJR,KAAM,CAACK,cDsDAI,cAvDS,SAAAC,GACpB,MAAO,CACH5B,MAF8D4B,EAA5C5B,MAGlBC,SAH8D2B,EAArC3B,WAyD7BoB,EAFWM,CAtCiB,SAAAE,GAC5B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAACC,OAAQ,SACjCL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,iCAIJR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKC,MAAM,UAAUC,aAAW,MAAMC,QAAS,kBAAMb,EAAMP,QAAQ,KAAKY,MAAO,CAACC,OAAQ,OACpFL,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,OAEJD,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKE,aAAW,SAASC,QAASb,EAAML,WAAYU,MAAO,CAACC,OAAQ,OAChEL,EAAAC,EAAAC,cAACY,EAAAb,EAAD,QAGRD,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACW,QAAS,OAAQC,cAAe,SAAUC,WAAY,MAAOC,YAAa,QAClFnB,EAAM7B,MAAMiD,IAAI,SAAAlC,GAAE,OACXe,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACInC,GAAG,4BACHoC,MAAK,QAAAC,OAAUrC,GACfsC,YAAY,UACZlB,OAAO,SACPE,QAAQ,WACRiB,IAAKvC,EACLwC,SAAU,SAAAC,GAAK,OAAI3B,EAAMJ,SAASV,EAAIyC,EAAMC,OAAOC,QACnDA,MAAO7B,EAAM5B,SAASc,GAAIQ,QAC1BW,MAAO,CAACC,OAAQ,oBE9C5CwB,IAASC,OACL9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAU1D,MAAOA,GACb2B,EAAAC,EAAAC,cAAC8B,EAAD,OAEJC,SAASC,eAAe,SN0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf094ed9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {Item, ItemId} from \"../models/common\";\r\n\r\nexport enum ActionType {\r\n    ADD_ITEM, EDIT_ITEM, CLEAR_ITEMS\r\n}\r\n\r\nexport interface AddItemAction {\r\n    type: ActionType.ADD_ITEM,\r\n    item: Item\r\n}\r\n\r\nexport interface EditItemAction {\r\n    type: ActionType.EDIT_ITEM,\r\n    id: ItemId,\r\n    item: Item\r\n}\r\n\r\nexport interface ClearItemsAction {\r\n    type: ActionType.CLEAR_ITEMS\r\n}\r\n\r\nexport type Action =\r\n    | AddItemAction\r\n    | EditItemAction\r\n    | ClearItemsAction\r\n    ;\r\n","import produce from \"immer\";\r\n\r\nimport {State} from \"../models/common\";\r\nimport {Action, ActionType} from \"../actions/Action\";\r\n\r\nconst EMPTY_STATE: State = Object.freeze({items: [], itemById: {}, itemIdSeq: 0});\r\n\r\nexport const reducer = function (state: State = EMPTY_STATE, action: Action): State {\r\n    switch (action.type) {\r\n        case ActionType.ADD_ITEM: {\r\n            return produce(state, draft => {\r\n                const id = draft.itemIdSeq.toString();\r\n                draft.items.push(id);\r\n                draft.itemIdSeq = draft.itemIdSeq + 1;\r\n                draft.itemById[id] = action.item;\r\n            });\r\n        }\r\n        case ActionType.EDIT_ITEM: {\r\n            return produce(state, draft => {\r\n                draft.itemById[action.id] = action.item;\r\n            });\r\n        }\r\n        case ActionType.CLEAR_ITEMS: {\r\n            return EMPTY_STATE;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n","import {configureStore} from 'redux-starter-kit'\r\nimport {reducer} from '../reducers/reducers'\r\n\r\nconst store = configureStore({\r\n    reducer,\r\n});\r\n\r\nexport default store;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {TextField, Typography} from \"@material-ui/core\";\r\n\r\nimport {State} from \"./engine/redux/todo/models/common\";\r\nimport {addItem, clearItems, editItem} from \"./engine/redux/todo/actions/ActionCreators\";\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = ({items, itemById,}: State /*, ownProps*/) => {\r\n    return {\r\n        items,\r\n        itemById\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {addItem, clearItems, editItem};\r\n\r\ninterface AppProps {\r\n    items: State[\"items\"],\r\n    itemById: State[\"itemById\"],\r\n    addItem: typeof addItem,\r\n    clearItems: typeof clearItems,\r\n    editItem: typeof editItem,\r\n}\r\n\r\nconst App: React.FC<AppProps> = props => {\r\n    return (\r\n        <div className=\"App\" style={{margin: \"2.5%\",}}>\r\n            <div>\r\n                <Typography variant=\"h3\" gutterBottom>\r\n                    Simple react-redux todo list\r\n                </Typography>\r\n            </div>\r\n            <div>\r\n                <Fab color=\"primary\" aria-label=\"Add\" onClick={() => props.addItem(\"\")} style={{margin: \"1%\"}}>\r\n                    <AddIcon/>\r\n                </Fab>\r\n                <Fab aria-label=\"Delete\" onClick={props.clearItems} style={{margin: \"1%\"}}>\r\n                    <DeleteIcon/>\r\n                </Fab>\r\n            </div>\r\n            <div style={{display: \"flex\", flexDirection: \"column\", marginLeft: \"20%\", marginRight: \"20%\",}}>\r\n                {props.items.map(id => (\r\n                        <TextField\r\n                            id=\"outlined-with-placeholder\"\r\n                            label={`Todo-${id}`}\r\n                            placeholder=\"Content\"\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            key={id}\r\n                            onChange={event => props.editItem(id, event.target.value)}\r\n                            value={props.itemById[id].message}\r\n                            style={{margin: \"1%\"}}\r\n                        />\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {App};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);\r\n","import {ActionType, AddItemAction, ClearItemsAction, EditItemAction} from \"./Action\";\r\nimport {ItemId} from \"../models/common\";\r\n\r\nexport function addItem(message: string): AddItemAction {\r\n    return {\r\n        type: ActionType.ADD_ITEM,\r\n        item: {message}\r\n    }\r\n}\r\n\r\nexport function editItem(itemId: ItemId, message: string): EditItemAction {\r\n    return {\r\n        type: ActionType.EDIT_ITEM,\r\n        id: itemId,\r\n        item: {message}\r\n    }\r\n}\r\n\r\nexport function clearItems(): ClearItemsAction {\r\n    return {\r\n        type: ActionType.CLEAR_ITEMS\r\n    };\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from \"./engine/redux/todo/store/store\";\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}